
OCP => ( Open closed Principle )


We have SuperHero class , of enum type and which contains list of superhero available
like Captain_America , Bat_Man , Iron_Man

Along with that there is function of Attacking method for each superhero
- attackWithCaptainAmerica
- attackWithBatMan
- attackWithIronMan

Problem is with the switch statement for the Attacker class , we have too much use case of the switch statement

package org.example.md_3_design_principle.design_2_OCP.wrongOCP;

import java.util.List;

public class Attacker {

    public boolean attackWithSuperHeros(List<SuperHero> superHeroes){
        for(int i=0;i<superHeroes.size();i++){
            SuperHero superhero=superHeroes.get(i);
            switch (superhero){
                case CAPTAIN_AMERICA:
                    superhero.attackWithCaptainAmerica();
                    break;
                case BAT_MAN:
                    superhero.attackWithBatMan();
                    break;
                case IRON_MAN:
                    superhero.attackWithIronMan();
                    break;
            }
        }
        return false;
    }
}


=> so to avoid these things we need to use Open closed principle , as we are unable to add new features

------------------------------------------------------------------------------------------------------------------------


Idealisation Principle of Open Closed Principle : A class should be open for extension but closed for modifications

-> We need to create a interface superHeros which contain method attack which is implemented by all the superheros
Iron Man , Captain America , Bat Man , Super Man . Then we are free from extra conditions on SuperHeros , we have
to create sperate class , if new super hero is added we dont need to modify SuperHero at all.

public interface SuperHero {
    void attack();
}

public class Attacker {
    public void attackSuperHero(List<SuperHero> superHeroes){
        for(int i=0;i<superHeroes.size();i++){
            SuperHero superHero=superHeroes.get(i);
            superHero.attack();
        }
    }
}


public class AttackerSimulator {
    public static void main(String[] args) {
        Attacker attacker=new Attacker();
        List<SuperHero> superHeroes=new ArrayList<>();
        superHeroes.add(new BatMan());
        superHeroes.add(new CaptainAmerica());
        superHeroes.add(new IronMan());
        superHeroes.add(new SuperMan());

        attacker.attackSuperHero(superHeroes);
    }
}





